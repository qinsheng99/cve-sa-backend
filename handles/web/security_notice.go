package web

import (
	"strings"

	"cve-sa-backend/dao"
	"cve-sa-backend/models"
	_const "cve-sa-backend/utils/const"
	"cve-sa-backend/utils/entity/cve_sa"
)

var productName = []string{"src", "aarch64", "noarch", "x86_64"}

func FindAllSecurity(req cvesa.RequestData) (*cvesa.ResultData, error) {
	datas, total, err := dao.DefaultSecurityNotice.SecurityFindAll(req)
	if err != nil {
		return nil, err
	}
	return returnNoticeData(datas, total), nil
}

func returnNoticeData(datas []models.CveSecurityNotice, total int64) *cvesa.ResultData {
	securityNoticeData := SecurityNoticeData(datas)
	return &cvesa.ResultData{
		SecurityNoticeList:  securityNoticeData,
		CveDatabaseList:     make([]cvesa.DatabaseData, 0),
		ApplicationCompList: make([]models.ROeCompatibilityApplication, 0),
		HardwareCompList:    make([]cvesa.HardwareCompatibility, 0),
		DriverCompList:      make([]models.OeCompatibilityDriver, 0),
		Total:               int(total),
	}
}

func GetSecurityNoticePackageByPackageName(pname string) ([]models.RCveSecurityNoticePackage, error) {
	pname = strings.Replace(pname, "\n", "", -1)
	pnames := strings.Split(pname, ",")

	datas, err := dao.DefaultSecurityNoticePackage.ByPackageName(pnames)
	if err != nil {
		return nil, err
	}
	return packageData(datas), nil
}

func packageData(datas []models.CveSecurityNoticePackage) []models.RCveSecurityNoticePackage {
	var list = make([]models.RCveSecurityNoticePackage, 0, len(datas))
	for _, v := range datas {
		list = append(list, models.RCveSecurityNoticePackage{CveSecurityNoticePackage: v, Updateime: v.Updateime.Format(_const.Format)})
	}
	return list
}

func NoticeByCVEID(cveId string) ([]cvesa.SecurityNoticeData, error) {
	datas, err := dao.DefaultSecurityNotice.NoticeByCveId(cveId)
	if err != nil {
		return nil, err
	}
	return SecurityNoticeData(datas), nil
}

func SecurityNoticeData(datas []models.CveSecurityNotice) []cvesa.SecurityNoticeData {
	var securityNoticeData = make([]cvesa.SecurityNoticeData, 0, len(datas))

	for _, v := range datas {
		securityNoticeData = append(securityNoticeData, SecurityNoticeDataOne(v))
	}
	return securityNoticeData
}

func SecurityNoticeDataOne(datas models.CveSecurityNotice) cvesa.SecurityNoticeData {
	return cvesa.SecurityNoticeData{
		RCveSecurityNotice: models.RCveSecurityNotice{
			CveSecurityNotice: datas,
			Updateime:         datas.Updateime.Format(_const.Format),
		},
		PackageHelperList: make([]cvesa.SAPackageHelper, 0),
		PackageList:       make([]models.RCveSecurityNoticePackage, 0),
		ReferenceList:     make([]models.RCveSecurityNoticeReference, 0),
		CveList:           make([]cvesa.DatabaseData, 0),
	}
}

func ByCveIdAndAffectedComponent(cveId, affectedComponent string) ([]cvesa.SecurityNoticeData, error) {
	datas, err := dao.DefaultSecurityNotice.NoticeByCveIdComponent(cveId, affectedComponent)
	if err != nil {
		return nil, err
	}
	return SecurityNoticeData(datas), nil
}

func NoticeBySecurityNoticeNo(s string) (*cvesa.SecurityNoticeData, error) {
	var SAPackages = make([]cvesa.SAPackageHelper, 0)
	securityNotice, err := dao.DefaultSecurityNotice.NoticeByNo(s)
	if err != nil {
		return nil, err
	}
	if securityNotice == nil {
		return nil, nil
	}
	snData := SecurityNoticeDataOne(*securityNotice)
	if securityNotice.AffectedProduct != "" {
		products := strings.Split(securityNotice.AffectedProduct, ";")
		for _, v := range products {
			packages, err := dao.DefaultSecurityNoticePackage.NoticePackageByNoProduct(s, v)
			if err != nil {
				return &snData, nil
			}
			var SAPackage cvesa.SAPackageHelper
			SAPackage.ProductName = v
			SAPackage.Child = getSAPackageHelper(packages)
			SAPackages = append(SAPackages, SAPackage)
		}
	}
	snData.PackageHelperList = SAPackages
	snData.Description = strings.Replace(snData.Description, "\\r\\n", "\r\n", -1)
	snData.Subject = strings.Replace(snData.Subject, "\\r\\n", "\r\n", -1)

	snData.PackageHotpatchList = genHotPatchList(snData.SecurityNoticeNo)

	if references, err := dao.DefaultSecurityNoticeReference.GetReferenceByNo(s); err == nil {
		snData.ReferenceList = reReference(references)
	}

	return &snData, nil
}

func genHotPatchList(securityNumber string) map[string][]cvesa.HotPatchList {
	l, _ := dao.DefaultSecurityHotPatch.HotPatchList(&models.CveSecurityHotPatch{SecurityNoticeNo: securityNumber})
	if len(l) == 0 {
		return nil
	}

	var res = make(map[string][]cvesa.HotPatchList, len(l))

	for i := range l {
		list, ok := res[l[i].CveNum]
		if !ok {
			list = make([]cvesa.HotPatchList, 0)
		}

		child := cvesa.HotPatchListCve{PackageName: []string{l[i].PackageName}, PackageType: l[i].PackageType}

		if idx := findProductNameIndex(list, l[i].ProductName); idx == -1 {
			list = append(list, cvesa.HotPatchList{
				ProductName: l[i].ProductName,
				Child:       []cvesa.HotPatchListCve{child},
			})
		} else {
			if archIdx := findArchIndex(list[idx].Child, child.PackageType); archIdx == -1 {
				list[idx].Child = append(list[idx].Child, child)
			} else {
				list[idx].Child[archIdx].PackageName = append(list[idx].Child[archIdx].PackageName, child.PackageName...)
			}
		}

		res[l[i].CveNum] = list
	}

	for k := range res {
		v := res[k]
		var vv []cvesa.HotPatchList
		for i := range v {
			var pat = cvesa.HotPatchList{ProductName: v[i].ProductName}
			for _, p := range productName {
				for j := range v[i].Child {
					if v[i].Child[j].PackageType == p {
						pat.Child = append(pat.Child, v[i].Child[j])
						break
					}
				}
			}

			vv = append(vv, pat)
		}

		res[k] = vv
	}

	return res
}

func findProductNameIndex(v []cvesa.HotPatchList, name string) int {
	for i := range v {
		if v[i].ProductName == name {
			return i
		}
	}

	return -1
}

func findArchIndex(v []cvesa.HotPatchListCve, arch string) int {
	for i := range v {
		if v[i].PackageType == arch {
			return i
		}
	}

	return -1
}

func getSAPackageHelper(datas []models.CveSecurityNoticePackage) []cvesa.SAPackageHelper {
	var SAPackageMap = make(map[string][]cvesa.SAPackageHelper)
	var SAPackages = make([]cvesa.SAPackageHelper, 0)
	if len(datas) > 0 {
		for _, v := range datas {
			list, ok := SAPackageMap[v.PackageType]
			if !ok {
				list = make([]cvesa.SAPackageHelper, 0)
			}
			var helper cvesa.SAPackageHelper
			helper.PackageName = v.PackageName
			helper.Child = make([]cvesa.SAPackageHelper, 0)
			list = append(list, helper)
			SAPackageMap[v.PackageType] = list
		}
	}
	for _, v := range productName {
		child, ok := SAPackageMap[v]
		if !ok {
			continue
		}
		var helper cvesa.SAPackageHelper
		helper.ProductName = v
		helper.Child = child
		SAPackages = append(SAPackages, helper)
	}
	return SAPackages
}

func reReference(datas []models.CveSecurityNoticeReference) []models.RCveSecurityNoticeReference {
	var list = make([]models.RCveSecurityNoticeReference, 0, len(datas))
	for _, v := range datas {
		list = append(list, models.RCveSecurityNoticeReference{CveSecurityNoticeReference: v, Updateime: v.Updateime.Format(_const.Format)})
	}
	return list
}
